package view;

import dao.DataSetDao;
import dao.NewsDao;
import dao.SentimentDao;
import dao.TopicDao;
import dao.TypeDao;
import dao.ValueDao;
import entity.DataSet;
import entity.News;
import entity.Sentiment;
import entity.Topic;
import entity.Value;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class DataSetFrame extends javax.swing.JFrame {

    int newsId;
    int dataSetId;
    int sentimentId;
    int typeId;
    int topicId;
    int valueId;

    HashMap hashMap;
    Set set;
    Iterator iterator;
    NewsDao newsDao;
    DataSetDao dataSetDao;
    SentimentDao sentimentDao = new SentimentDao();
    TopicDao topicDao;
    TypeDao typeDao;
    ValueDao valueDao;

    public DataSetFrame() throws ClassNotFoundException, IOException {
        initComponents();

        newsDao = new NewsDao();
        dataSetDao = new DataSetDao();
        sentimentDao = new SentimentDao();
        topicDao = new TopicDao();
        typeDao = new TypeDao();
        valueDao = new ValueDao();

        try {
            newsDao.fillTable(tblNews);
        } catch (ClassNotFoundException | IOException ex) {
            Logger.getLogger(DataSetFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        cmbDataSet.addItem(".:Select:.");
        cmbSentiment.addItem(".:Select:.");
        cmbTopic.addItem(".:Select:.");
        cmbType.addItem(".:Select:.");
        cmbValue.addItem(".:Select:.");

        hashMap = new HashMap();
        hashMap = dataSetDao.hashMap();
        set = hashMap.entrySet();
        iterator = set.iterator();

        while (iterator.hasNext()) {
            Map.Entry me = (Map.Entry) iterator.next();
            cmbDataSet.addItem(me.getValue().toString());
        }

        Calendar today = Calendar.getInstance();
        dtNewsDate.setDate(today.getTime());

        hashMap = new HashMap();
        hashMap = sentimentDao.hashMap();
        set = hashMap.entrySet();
        iterator = set.iterator();

        while (iterator.hasNext()) {
            Map.Entry me = (Map.Entry) iterator.next();
            cmbSentiment.addItem(me.getValue().toString());
        }

        hashMap = new HashMap();
        hashMap = topicDao.hashMap();
        set = hashMap.entrySet();
        iterator = set.iterator();

        while (iterator.hasNext()) {
            Map.Entry me = (Map.Entry) iterator.next();
            cmbTopic.addItem(me.getValue().toString());
        }

        hashMap = new HashMap();
        hashMap = typeDao.hashMap();
        set = hashMap.entrySet();
        iterator = set.iterator();

        while (iterator.hasNext()) {
            Map.Entry me = (Map.Entry) iterator.next();
            cmbType.addItem(me.getValue().toString());
        }

        hashMap = new HashMap();
        hashMap = valueDao.hashMap();
        set = hashMap.entrySet();
        iterator = set.iterator();

        while (iterator.hasNext()) {
            Map.Entry me = (Map.Entry) iterator.next();
            cmbValue.addItem(me.getValue().toString());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        txtActors = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtNewsId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtUrl = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtFakeTruthMatchNewsId = new javax.swing.JTextField();
        txtNewsTitle = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtNewsDetail = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        dtNewsDate = new com.toedter.calendar.JDateChooser();
        cmbDataSet = new javax.swing.JComboBox<>();
        cmbSentiment = new javax.swing.JComboBox<>();
        cmbType = new javax.swing.JComboBox<>();
        cmbValue = new javax.swing.JComboBox<>();
        cmbTopic = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNews = new javax.swing.JTable();
        btnEkle = new javax.swing.JButton();
        btnGuncelle = new javax.swing.JButton();
        btnSil = new javax.swing.JButton();
        btnTemizle = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel3.setText("Actors");

        jLabel1.setText("NewsId");

        txtNewsId.setEditable(false);

        jLabel2.setText("NewsDate");

        jLabel5.setText("Type");

        jLabel6.setText("Value");

        jLabel7.setText("Sentiment");

        jLabel8.setText("Topic");

        jLabel10.setText("Url");

        jLabel12.setText("FakeTruthMatchNewsId");

        jLabel13.setText("NewsTitle");

        jLabel14.setText("NewsDetail");

        txtNewsDetail.setColumns(20);
        txtNewsDetail.setLineWrap(true);
        txtNewsDetail.setRows(7);
        txtNewsDetail.setAutoscrolls(false);
        jScrollPane2.setViewportView(txtNewsDetail);

        jLabel4.setText("DataSet");

        dtNewsDate.setDateFormatString("yyyy-MM-dd");

        tblNews.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NewsId", "DataSetName", "NewsDate", "Actors", "SentimentName", "TypeName", "ValueName", "FakeTruthMatchNewsId", "TopicName", "Url", "NewsTitle", "NewsDetail"
            }
        ));
        tblNews.setPreferredSize(new java.awt.Dimension(900, 500));
        tblNews.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNewsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblNews);
        tblNews.getAccessibleContext().setAccessibleParent(this);

        btnEkle.setText("EKLE");
        btnEkle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEkleActionPerformed(evt);
            }
        });

        btnGuncelle.setText("GÜNCELLE");
        btnGuncelle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuncelleActionPerformed(evt);
            }
        });

        btnSil.setText("SİL");
        btnSil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSilActionPerformed(evt);
            }
        });

        btnTemizle.setText("TEMİZLE");
        btnTemizle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTemizleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnEkle, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(96, 96, 96)
                                        .addComponent(btnGuncelle, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(63, 63, 63)
                                        .addComponent(btnSil, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(184, 184, 184)
                                        .addComponent(btnTemizle, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane2)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dtNewsDate, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtFakeTruthMatchNewsId, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(97, 97, 97)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbTopic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtActors, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(2, 2, 2)
                                .addComponent(txtNewsTitle))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbSentiment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNewsId, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbDataSet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(1001, 1001, 1001)))))
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1330, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel12)
                            .addComponent(txtFakeTruthMatchNewsId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbSentiment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(cmbTopic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(txtActors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4)
                                .addComponent(cmbDataSet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)
                                .addComponent(txtNewsId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(dtNewsDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(114, 114, 114)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtNewsTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEkle)
                    .addComponent(btnGuncelle)
                    .addComponent(btnSil)
                    .addComponent(btnTemizle))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    public void temizle() {
        txtNewsId.setText("");
        cmbDataSet.setSelectedIndex(0);
        Calendar today = Calendar.getInstance();
        dtNewsDate.setDate(today.getTime());
        txtActors.setText("");
        cmbSentiment.setSelectedIndex(0);
        cmbType.setSelectedIndex(0);
        cmbValue.setSelectedIndex(0);
        txtFakeTruthMatchNewsId.setText("");
        cmbTopic.setSelectedIndex(0);
        txtUrl.setText("");
        txtNewsTitle.setText("");
        txtNewsDetail.setText("");

    }
    private void btnEkleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEkleActionPerformed

        News news = new News();
        DataSet dataSet = new DataSet();
        Sentiment sentiment = new Sentiment();
        Topic topic = new Topic();
        entity.Type type = new entity.Type();
        Value value = new Value();

        NewsDao newsDao = new NewsDao();

        String msg = "Lütfen DataSetId alanını boş bırakmayınız!";

        try {
            if (cmbDataSet.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, msg, "Gerekli Alan Uyarısı", JOptionPane.ERROR_MESSAGE);
            } else {

                hashMap = new HashMap();
                hashMap = dataSetDao.hashMap();
                set = hashMap.entrySet();
                iterator = set.iterator();
                while (iterator.hasNext()) {
                    Map.Entry me = (Map.Entry) iterator.next();
                    if (me.getValue().toString().equals(cmbDataSet.getSelectedItem().toString())) {
                        dataSetId = (int) me.getKey();
                        break;
                    }
                }

                dataSet.setDataSetId(dataSetId);

                news.setDataSetId(dataSet);

                java.sql.Date sqlDate = new java.sql.Date(dtNewsDate.getDate().getTime());
                news.setNewsDate(sqlDate);

                news.setActors(txtActors.getText());

                hashMap = new HashMap();
                hashMap = sentimentDao.hashMap();
                set = hashMap.entrySet();
                iterator = set.iterator();
                while (iterator.hasNext()) {
                    Map.Entry me = (Map.Entry) iterator.next();
                    if (me.getValue().toString().equals(cmbSentiment.getSelectedItem().toString())) {
                        sentimentId = (int) me.getKey();
                        break;
                    }
                }

                sentiment.setSentimentId(sentimentId);
                news.setSentimentId(sentiment);

                hashMap = new HashMap();
                hashMap = typeDao.hashMap();
                set = hashMap.entrySet();
                iterator = set.iterator();
                while (iterator.hasNext()) {
                    Map.Entry me = (Map.Entry) iterator.next();
                    if (me.getValue().toString().equals(cmbType.getSelectedItem().toString())) {
                        typeId = (int) me.getKey();
                        break;
                    }
                }

                type.setTypeId(typeId);
                news.setTypeId(type);

                hashMap = new HashMap();
                hashMap = valueDao.hashMap();
                set = hashMap.entrySet();
                iterator = set.iterator();
                while (iterator.hasNext()) {
                    Map.Entry me = (Map.Entry) iterator.next();
                    if (me.getValue().toString().equals(cmbValue.getSelectedItem().toString())) {
                        valueId = (int) me.getKey();
                        break;
                    }
                }

                value.setValueId(valueId);
                news.setValueId(value);

                news.setFakeTruthMatchNewsId(Integer.parseInt(txtFakeTruthMatchNewsId.getText()));

                hashMap = new HashMap();
                hashMap = topicDao.hashMap();
                set = hashMap.entrySet();
                iterator = set.iterator();
                while (iterator.hasNext()) {
                    Map.Entry me = (Map.Entry) iterator.next();
                    if (me.getValue().toString().equals(cmbTopic.getSelectedItem().toString())) {
                        topicId = (int) me.getKey();
                        break;
                    }
                }
                topic.setTopicId(topicId);
                news.setTopicId(topic);

                news.setUrl(txtUrl.getText().toString());
                news.setNewsTitle(txtNewsTitle.getText().toString());
                news.setNewsDetail(txtNewsDetail.getText().toString());

                newsDao.addNews(news);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            newsDao.fillTable(tblNews);
            temizle();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnEkleActionPerformed

    private void btnTemizleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTemizleActionPerformed
        temizle();
    }//GEN-LAST:event_btnTemizleActionPerformed

    private void btnGuncelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuncelleActionPerformed
        News news = new News();
        DataSet dataSet = new DataSet();
        Sentiment sentiment = new Sentiment();
        Topic topic = new Topic();
        entity.Type type = new entity.Type();
        Value value = new Value();
        NewsDao newsDao = new NewsDao();
        String msg = "Lütfen tablodan bir kayıt seçiniz!";

        try {
            if ("".equals(txtNewsId.getText().trim())) {
                JOptionPane.showMessageDialog(null, msg, "Gerekli Alan Uyarısı", JOptionPane.ERROR_MESSAGE);
            } else {
                hashMap = new HashMap();
                hashMap = dataSetDao.hashMap();
                set = hashMap.entrySet();
                iterator = set.iterator();
                while (iterator.hasNext()) {
                    Map.Entry me = (Map.Entry) iterator.next();
                    if (me.getValue().toString().equals(cmbDataSet.getSelectedItem().toString())) {
                        dataSetId = (int) me.getKey();
                        break;
                    }
                }

                dataSet.setDataSetId(dataSetId);

                news.setDataSetId(dataSet);

                java.sql.Date sqlDate = new java.sql.Date(dtNewsDate.getDate().getTime());
                news.setNewsDate(sqlDate);

                news.setActors(txtActors.getText());

                hashMap = new HashMap();
                hashMap = sentimentDao.hashMap();
                set = hashMap.entrySet();
                iterator = set.iterator();
                while (iterator.hasNext()) {
                    Map.Entry me = (Map.Entry) iterator.next();
                    if (me.getValue().toString().equals(cmbSentiment.getSelectedItem().toString())) {
                        sentimentId = (int) me.getKey();
                        break;
                    }
                }

                sentiment.setSentimentId(sentimentId);
                news.setSentimentId(sentiment);

                hashMap = new HashMap();
                hashMap = typeDao.hashMap();
                set = hashMap.entrySet();
                iterator = set.iterator();
                while (iterator.hasNext()) {
                    Map.Entry me = (Map.Entry) iterator.next();
                    if (me.getValue().toString().equals(cmbType.getSelectedItem().toString())) {
                        typeId = (int) me.getKey();
                        break;
                    }
                }

                type.setTypeId(typeId);
                news.setTypeId(type);

                hashMap = new HashMap();
                hashMap = valueDao.hashMap();
                set = hashMap.entrySet();
                iterator = set.iterator();
                while (iterator.hasNext()) {
                    Map.Entry me = (Map.Entry) iterator.next();
                    if (me.getValue().toString().equals(cmbValue.getSelectedItem().toString())) {
                        valueId = (int) me.getKey();
                        break;
                    }
                }

                value.setValueId(valueId);
                news.setValueId(value);

                news.setFakeTruthMatchNewsId(Integer.parseInt(txtFakeTruthMatchNewsId.getText()));

                hashMap = new HashMap();
                hashMap = topicDao.hashMap();
                set = hashMap.entrySet();
                iterator = set.iterator();
                while (iterator.hasNext()) {
                    Map.Entry me = (Map.Entry) iterator.next();
                    if (me.getValue().toString().equals(cmbTopic.getSelectedItem().toString())) {
                        topicId = (int) me.getKey();
                        break;
                    }
                }
                topic.setTopicId(topicId);
                news.setTopicId(topic);

                news.setUrl(txtUrl.getText().toString());
                news.setNewsTitle(txtNewsTitle.getText().toString());
                news.setNewsDetail(txtNewsDetail.getText().toString());

                news.setNewsId(Integer.parseInt(txtNewsId.getText().toString()));
                newsDao.updateNews(news);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            newsDao.fillTable(tblNews);
            temizle();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnGuncelleActionPerformed

    private void btnSilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSilActionPerformed

        News news = new News();
        NewsDao newsDao = new NewsDao();
        String msg = "Lütfen tablodan bir kayıt seçiniz!";

        try {
            if ("".equals(txtNewsId.getText().trim())) {
                JOptionPane.showMessageDialog(null, msg, "Gerekli Alan Uyarısı", JOptionPane.ERROR_MESSAGE);
            } else {
                news.setNewsId(Integer.parseInt(txtNewsId.getText().toString()));

                newsDao.deleteNews(news);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            newsDao.fillTable(tblNews);
            temizle();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSilActionPerformed

    private void tblNewsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNewsMouseClicked
        newsId = (int) tblNews.getValueAt(tblNews.getSelectedRow(), 0);
        txtNewsId.setText(tblNews.getValueAt(tblNews.getSelectedRow(), 0).toString());

        for (int i = 0; i < cmbDataSet.getItemCount(); i++) {
            if (cmbDataSet.getItemAt(i).equals(tblNews.getValueAt(tblNews.getSelectedRow(), 1))) {
                cmbDataSet.setSelectedIndex(i);
                break;
            }
        }

        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date date = null;

        try {
            if (!tblNews.getValueAt(tblNews.getSelectedRow(), 2).toString().equals("") && null != tblNews.getValueAt(tblNews.getSelectedRow(), 2)) {
                date = (java.util.Date) format.parse(tblNews.getValueAt(tblNews.getSelectedRow(), 2).toString());
            }
        } catch (ParseException ex) {
            Logger.getLogger(DataSetFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        GregorianCalendar calendar = new GregorianCalendar();
        calendar.setTime(date);
        dtNewsDate.setDate(date);

        if (tblNews.getValueAt(tblNews.getSelectedRow(), 3) != null) {
            txtActors.setText(tblNews.getValueAt(tblNews.getSelectedRow(), 3).toString());
        } else {
            txtActors.setText("");
        }

        for (int i = 0; i < cmbSentiment.getItemCount(); i++) {
            if (cmbSentiment.getItemAt(i).equals(tblNews.getValueAt(tblNews.getSelectedRow(), 4))) {
                cmbSentiment.setSelectedIndex(i);
                break;
            }
        }

        for (int i = 0; i < cmbType.getItemCount(); i++) {
            if (cmbType.getItemAt(i).equals(tblNews.getValueAt(tblNews.getSelectedRow(), 5))) {
                cmbType.setSelectedIndex(i);
                break;
            }
        }

        for (int i = 0; i < cmbValue.getItemCount(); i++) {
            if (cmbValue.getItemAt(i).equals(tblNews.getValueAt(tblNews.getSelectedRow(), 6))) {
                cmbValue.setSelectedIndex(i);
                break;
            }
        }

        if (tblNews.getValueAt(tblNews.getSelectedRow(), 7) != null) {
            txtFakeTruthMatchNewsId.setText(tblNews.getValueAt(tblNews.getSelectedRow(), 7).toString());
        } else {
            txtFakeTruthMatchNewsId.setText("");
        }

        for (int i = 0; i < cmbTopic.getItemCount(); i++) {
            if (cmbTopic.getItemAt(i).equals(tblNews.getValueAt(tblNews.getSelectedRow(), 8))) {
                cmbTopic.setSelectedIndex(i);
                break;
            }
        }

        if (tblNews.getValueAt(tblNews.getSelectedRow(), 9) != null) {
            txtUrl.setText(tblNews.getValueAt(tblNews.getSelectedRow(), 9).toString());
        } else {
            txtUrl.setText("");
        }

        if (tblNews.getValueAt(tblNews.getSelectedRow(), 10) != null) {
            txtNewsTitle.setText(tblNews.getValueAt(tblNews.getSelectedRow(), 10).toString());
        } else {
            txtNewsTitle.setText("");
        }

        if (tblNews.getValueAt(tblNews.getSelectedRow(), 11) != null) {
            txtNewsDetail.setText(tblNews.getValueAt(tblNews.getSelectedRow(), 11).toString());
        } else {
            txtNewsDetail.setText("");
        }
    }//GEN-LAST:event_tblNewsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataSetFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataSetFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataSetFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataSetFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new DataSetFrame().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(DataSetFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(DataSetFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEkle;
    private javax.swing.JButton btnGuncelle;
    private javax.swing.JButton btnSil;
    private javax.swing.JButton btnTemizle;
    private javax.swing.JComboBox<String> cmbDataSet;
    private javax.swing.JComboBox<String> cmbSentiment;
    private javax.swing.JComboBox<String> cmbTopic;
    private javax.swing.JComboBox<String> cmbType;
    private javax.swing.JComboBox<String> cmbValue;
    private com.toedter.calendar.JDateChooser dtNewsDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblNews;
    private javax.swing.JTextField txtActors;
    private javax.swing.JTextField txtFakeTruthMatchNewsId;
    private javax.swing.JTextArea txtNewsDetail;
    private javax.swing.JTextField txtNewsId;
    private javax.swing.JTextField txtNewsTitle;
    private javax.swing.JTextField txtUrl;
    // End of variables declaration//GEN-END:variables
}
